// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String?   @unique
  emailVerified  DateTime?
  passwordHash   String
  name           String?
  role           Role      @default(ADMIN)
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
}

model Album {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  description     String?
  coverImage      MediaAsset?  @relation("AlbumCoverImage", fields: [coverImageId], references: [id])
  coverImageId    String?      @unique
  isPublic        Boolean      @default(true)
  photos          Photo[]
  featuredPhoto   Photo?       @relation("FeaturedPhoto", fields: [featuredPhotoId], references: [id])
  featuredPhotoId String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Photo {
  id          String   @id @default(cuid())
  album       Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId     String
  featuredIn  Album?   @relation("FeaturedPhoto")
  title       String?
  description String?
  url         String
  publicId    String   @unique
  format      String?
  width       Int?
  height      Int?
  isFeatured  Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
}

model Film {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  description String?
  videoUrl    String
  platform    VideoPlatform
  poster      MediaAsset?    @relation("FilmPoster", fields: [posterId], references: [id])
  posterId    String?        @unique
  isFeatured  Boolean        @default(false)
  tags        Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum VideoPlatform {
  YOUTUBE
  VIMEO
  CLOUDINARY
}

model BlogPost {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  excerpt         String?
  content         String
  featuredImage   MediaAsset?  @relation("BlogFeaturedImage", fields: [featuredImageId], references: [id])
  featuredImageId String?      @unique
  tags            Json?
  category        String?
  status          PostStatus   @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Testimonial {
  id         String      @id @default(cuid())
  clientName String
  eventType  String?
  quote      String
  rating     Int?
  avatar     MediaAsset? @relation("TestimonialAvatar", fields: [avatarId], references: [id])
  avatarId   String?     @unique
  isFeatured Boolean     @default(true)
  createdAt  DateTime    @default(now())
}

model ContactRequest {
  id        String         @id @default(cuid())
  name      String
  email     String
  phone     String?
  eventType String
  eventDate DateTime?
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime       @default(now())
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  ARCHIVED
}

model MediaAsset {
  id        String     @id @default(cuid())
  url       String
  publicId  String     @unique
  width     Int?
  height    Int?
  format    String?
  bytes     Int?
  createdAt DateTime   @default(now())

  albumCover         Album?       @relation("AlbumCoverImage")
  filmPoster         Film?        @relation("FilmPoster")
  blogFeatured       BlogPost?    @relation("BlogFeaturedImage")
  testimonialAvatar  Testimonial? @relation("TestimonialAvatar")
}

model SiteSetting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  updatedAt DateTime @updatedAt
}
